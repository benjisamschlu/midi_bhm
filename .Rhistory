group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = dth/exp %>% ) %>%
ggplot(aes(x = age, y = nmx, col = sex, group = sex)) +
geom_point(col = "#7494A4") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.bel %>%
filter(reg == "Région Wallonne",
year == 2007,
sex == "f")
df.bel %>%
filter(reg == "Région Wallonne",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = dth/exp) %>%
ggplot(aes(x = age, y = nmx, col = sex, group = sex)) +
geom_point(col = "#7494A4") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.bel %>%
filter(reg == "Région Wallonne",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = dth/exp) %>%
ggplot(aes(x = age, y = nmx, group = sex)) +
geom_point(col = "#7494A4") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.bel %>%
filter(reg == "Région Wallonne",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = dth/exp) %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.bel %>%
filter(prov == "Province de Liège",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = dth/exp) %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.bel %>%
filter(dist == "Arrondissement de Namur",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = dth/exp) %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.bel %>%
filter(dist == "Arrondissement de Namur",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA)) %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
unique(df.bel$comm)
unique(df.bel$commune)
df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA))
df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA))
packages <- c("tidyverse", "ggplot2", "HMDHFDplus", "viridis", "scales",
"forecast", "cowplot", "RColorBrewer", "raster", "spdep",
"broom", "leaflet")
invisible( lapply(packages, library, character.only = TRUE))
df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA))
df.bel <- readRDS("../../../subnational_covid_bel/data/tidy/df_ageyearsexadmins_extrapol2020exp.rda")
df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA))
df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f",
age != "100") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA))
# Functions
source("./code/function/TOPALS_fit.R")
df.fit <- df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f",
age != "100") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA))
# Functions
source("../../code/function/TOPALS_fit.R")
# Age groups
boundaries <- c(0, 1, seq(5, 100, 5))
# Matrix to convert one-year age group into G group
ngroup = length(unique(df.fit$age))
age = 0:99
nage = length(age)
W = matrix(0, nrow=ngroup, ncol=nage)
boundary_ages = c(unique(df$age), max(df$age)+5)
boundary_ages = c(unique(df.fit$age), max(df.fit$age)+5)
df.fit <- df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f",
age != "100") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA),
age = as.character(age) %>% as.numeric)
# Functions
source("../../code/function/TOPALS_fit.R")
# Age groups
boundaries <- c(0, 1, seq(5, 100, 5))
# Matrix to convert one-year age group into G group
ngroup = length(unique(df.fit$age))
age = 0:99
nage = length(age)
W = matrix(0, nrow=ngroup, ncol=nage)
boundary_ages = c(unique(df.fit$age), max(df.fit$age)+5)
ix = cbind(as.numeric( cut( age, breaks = boundary_ages, right=FALSE) ), seq(age) )
W[ix] = 1
W = prop.table(W,margin=1)
W
# Standard for Male and Female
lambda_star <- readRDS("../../data/simulation/lambda_star.rda")[1:100, 2]
get_topals <- function(E, D, ...) {
fit = TOPALS_fit(N = E,
D = D,
std = lambda_star,
age_group_bounds = boundaries,
details = TRUE)
# Continuous age: Convert using weighting matrix
mx = exp(fit$logm)
mx = W %*% mx
return(tmp)
}
df.fit <- df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f",
age != "100") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA),
age = as.character(age) %>% as.numeric,
year = 2007)
df.fit <- df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f",
age != "100") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA),
age = as.character(age) %>% as.numeric)
df.fit
get_topals(df.fit$exp, df.fit$dth)
get_topals <- function(E, D, ...) {
fit = TOPALS_fit(N = E,
D = D,
std = lambda_star,
age_group_bounds = boundaries,
details = TRUE)
# Continuous age: Convert using weighting matrix
mx = exp(fit$logm)
mx = W %*% mx
return(mx)
}
get_topals(df.fit$exp, df.fit$dth)
df.fit <- df.fit %>%
mutate(fit.topals = get_topals(df.fit$exp, df.fit$dth))
df.fit
df.fit <- df.fit %>%
mutate(fit.topals = as.numeric(get_topals(df.fit$exp, df.fit$dth)))
df.fit
df.fit <- df.fit %>%
mutate(fit.topals = get_topals(df.fit$exp, df.fit$dth) %>%
as.numeric)
df.fit
df.fit %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
geom_line(aes(y = fit.topals)) +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
source("../../code/function/Dspline_fit.R")
## D-splines
load(url('http://bonecave.schmert.net/general_Dspline_constants.RData'))
this_gender_code <- "F"
this_method <- "D-LC"
get_dspline <- function(D, E, ...) {
this_sex = c('F'='Female', 'M'='Male')[this_gender_code]
fit = Dspline_fit(N=E, D=E,
age_group_lower_bounds = x$L,
age_group_upper_bounds = x$H,
Amatrix   = Dspline_constants[[this_sex]][[this_method]]$A,
cvector   = Dspline_constants[[this_sex]][[this_method]]$c,
SIGMA.INV = Dspline_constants[[this_sex]][[this_method]]$SIGMA.INV,
max_iter  = 50,
details=TRUE)
# Continuous age: Convert using weighting matrix
mx = exp(fit$lambda.hat)
mx = W %*% mx
# Merge data & outputs together
return(mx)
}
df.fit <- df.fit %>%
mutate(fit.dsplines = get_dspline(df.fit$exp, df.fit$dth) %>%
as.numeric)
df.fit <- df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f",
age != "100") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA),
age = as.character(age) %>% as.numeric,
L = age,
H = case_when(age == 0 ~ L + 1,
age == 1 ~ L + 4,
TRUE ~ L + 5))
df.fit
df.fit <- df.fit %>%
mutate(fit.dsplines = get_dspline(df.fit$exp, df.fit$dth,
df.fit$L, df.fit$H) %>%
as.numeric)
get_dspline <- function(D, E, L, H...) {
this_sex = c('F'='Female', 'M'='Male')[this_gender_code]
fit = Dspline_fit(N=E, D=E,
age_group_lower_bounds = L,
age_group_upper_bounds = H,
Amatrix   = Dspline_constants[[this_sex]][[this_method]]$A,
cvector   = Dspline_constants[[this_sex]][[this_method]]$c,
SIGMA.INV = Dspline_constants[[this_sex]][[this_method]]$SIGMA.INV,
max_iter  = 50,
details=TRUE)
# Continuous age: Convert using weighting matrix
mx = exp(fit$lambda.hat)
mx = W %*% mx
# Merge data & outputs together
return(mx)
}
df.fit <- df.fit %>%
mutate(fit.dsplines = get_dspline(df.fit$exp, df.fit$dth,
df.fit$L, df.fit$H) %>%
as.numeric)
df.fit$exp
df.fit$dth
df.fit$H
df.fit$L
source("../../code/function/Dspline_fit.R")
get_dspline(df.fit$exp, df.fit$dth, df.fit$L, df.fit$H)
get_dspline <- function(D, E, L, H, ...) {
this_sex = c('F'='Female', 'M'='Male')[this_gender_code]
fit = Dspline_fit(N=E, D=E,
age_group_lower_bounds = L,
age_group_upper_bounds = H,
Amatrix   = Dspline_constants[[this_sex]][[this_method]]$A,
cvector   = Dspline_constants[[this_sex]][[this_method]]$c,
SIGMA.INV = Dspline_constants[[this_sex]][[this_method]]$SIGMA.INV,
max_iter  = 50,
details=TRUE)
# Continuous age: Convert using weighting matrix
mx = exp(fit$lambda.hat)
mx = W %*% mx
# Merge data & outputs together
return(mx)
}
df.fit <- df.fit %>%
mutate(fit.dsplines = get_dspline(df.fit$exp, df.fit$dth,
df.fit$L, df.fit$H) %>%
as.numeric)
df.fit %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
geom_line(aes(y = fit.topals), col = "red4") +
geom_line(aes(y = fit.dspines), col = "skyblue3") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.fit <- df.bel %>%
filter(commune == "Namur",
year == 2007,
sex == "f",
age != "100") %>%
group_by(age) %>%
summarise(dth = sum(dth),
exp = sum(exp)) %>%
ungroup() %>%
mutate(nmx = ifelse(dth != 0, dth/exp, NA),
age = as.character(age) %>% as.numeric,
L = age,
H = case_when(age == 0 ~ L + 1,
age == 1 ~ L + 4,
TRUE ~ L + 5))
df.fit <- df.fit %>%
mutate(fit.topals = get_topals(df.fit$exp, df.fit$dth) %>%
as.numeric)
df.fit <- df.fit %>%
mutate(fit.dsplines = get_dspline(df.fit$exp, df.fit$dth,
df.fit$L, df.fit$H) %>%
as.numeric)
df.fit %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
geom_line(aes(y = fit.topals), col = "red4") +
geom_line(aes(y = fit.dspines), col = "skyblue3") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
df.fit %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
geom_line(aes(y = fit.topals), col = "red4") +
geom_line(aes(y = fit.dsplines), col = "skyblue3") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
get_dspline <- function(D, E, L, H, ...) {
this_sex = c('F'='Female', 'M'='Male')[this_gender_code]
fit = Dspline_fit(N=E, D=D,
age_group_lower_bounds = L,
age_group_upper_bounds = H,
Amatrix   = Dspline_constants[[this_sex]][[this_method]]$A,
cvector   = Dspline_constants[[this_sex]][[this_method]]$c,
SIGMA.INV = Dspline_constants[[this_sex]][[this_method]]$SIGMA.INV,
max_iter  = 50,
details=TRUE)
# Continuous age: Convert using weighting matrix
mx = exp(fit$lambda.hat)
mx = W %*% mx
# Merge data & outputs together
return(mx)
}
df.fit <- df.fit %>%
mutate(fit.dsplines = get_dspline(df.fit$exp, df.fit$dth,
df.fit$L, df.fit$H) %>%
as.numeric)
rlang::last_error()
get_dspline <- function(D, E, L, H, ...) {
this_sex = c('F'='Female', 'M'='Male')[this_gender_code]
fit = Dspline_fit(N=E, D=D,
age_group_lower_bounds = L,
age_group_upper_bounds = H,
Amatrix   = Dspline_constants[[this_sex]][[this_method]]$A,
cvector   = Dspline_constants[[this_sex]][[this_method]]$c,
SIGMA.INV = Dspline_constants[[this_sex]][[this_method]]$SIGMA.INV,
max_iter  = 50,
details=TRUE)
# Continuous age: Convert using weighting matrix
mx = exp(fit$lambda.hat)
mx = W %*% mx
# Merge data & outputs together
return(mx)
}
df.fit <- df.fit %>%
mutate(fit.dsplines = get_dspline(df.fit$dth, df.fit$exp,
df.fit$L, df.fit$H) %>%
as.numeric)
df.fit %>%
ggplot(aes(x = age, y = nmx)) +
geom_point(col = "#7494A4") +
geom_line(aes(y = fit.topals), col = "red4") +
geom_line(aes(y = fit.dsplines), col = "skyblue3") +
theme_bw() +
scale_y_log10() +
labs(y = "Raw nMx",
x = "Age")
knitr::include_graphics("../../../../Presentation/Bayesian Methods for the Social Sciences/map_be.pdf")
df.reg.nuts3 <- readRDS("../../data/simulation/df_hmd_be_real_NUTS3.rda")
str(df.reg.nuts3)
df.reg.nuts3 %>%
filter(age == 0) %>%
mutate(sex = ifelse(sex == "f", "female", "male")) %>%
ggplot(aes(x = year, y = ex, col = reg)) +
facet_wrap(~ sex,
scales = "free_y") +
geom_jitter(width = 0.2) +
theme_bw() +
scale_color_viridis_d(option = "C") +
labs(y = expression(e^0),
x = "Year",
col = "''Region''")
packages <- c("tidyverse", "ggplot2", "HMDHFDplus", "viridis", "scales",
"forecast", "cowplot", "RColorBrewer", "raster", "spdep",
"broom", "leaflet")
invisible( lapply(packages, library, character.only = TRUE))
df.reg.nuts3 %>%
filter(age == 0) %>%
mutate(sex = ifelse(sex == "f", "female", "male")) %>%
ggplot(aes(x = year, y = ex, col = reg)) +
facet_wrap(~ sex,
scales = "free_y") +
geom_jitter(width = 0.2) +
theme_bw() +
scale_color_viridis_d(option = "C") +
labs(y = expression(e^0),
x = "Year",
col = "''Region''")
df.reg.nuts3 %>%
filter(age == 0) %>%
mutate(sex = ifelse(sex == "f", "female", "male")) %>%
ggplot(aes(x = year, y = ex, col = reg)) +
facet_wrap(~ sex,
scales = "free_y") +
geom_jitter(width = 0.2) +
theme_bw() +
scale_color_viridis_d(option = "C") +
labs(y = expression(e^0),
x = "Year",
col = "''Province''")
?guide
packages <- c("tidyverse", "ggplot2", "HMDHFDplus", "viridis", "scales",
"forecast", "cowplot", "RColorBrewer", "raster", "spdep",
"broom", "leaflet")
invisible( lapply(packages, library, character.only = TRUE))
?guides
